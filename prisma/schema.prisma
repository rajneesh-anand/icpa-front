datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Post {
  id        Int     @default(autoincrement()) @id
  title     String?
  subCategories String[]
  category String?
  slug      String?
  content   String?
  template   String?
  tags      String[]
  image     String?
  createdAt     DateTime  @default(now()) 
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int? 
}

model Products {
  id       Int     @default(autoincrement()) @id
  name     String?
  slug String?
  images    String?
  description String?
  category    String?  
  size  String?
  weight  Decimal?  
  price    Decimal? 
  sellingPrice Decimal?
  discount Decimal?
  gst Decimal?
  minimumQuantity Int?
  details String?
  ratings Decimal?
  inStock Boolean @default(true) 
  createdAt     DateTime  @default(now()) 
}

model Categories {
  id        Int  @default(autoincrement()) @id
  name      String? @unique
  description String?
  slug String?
  services  Services[] 
  courses Courses[]
}

model Services {
  id       Int     @default(autoincrement()) @id
  serviceName      String? @unique
  slug String?
  images    String[]
  description String? 
  serviceFee    Decimal 
  saleFee Decimal
  discount Decimal?
  gst Decimal? 
  usage String?
  status Boolean @default(true) 
  createdAt     DateTime  @default(now()) 
  categoryId  Int?
  category    Categories?   @relation(fields: [categoryId], references: [id]) 
}

model Courses {
  id       Int     @default(autoincrement()) @id
  courseName     String? @unique
  slug String?
  description String? 
  details String?  
  images    String? 
  courseFee    Decimal 
  saleFee Decimal?
  discount Decimal?
  gst Decimal?
  ratings Decimal?
  numberOfRatings Int?
  numberOfEnrollments Int? 
  duration String ?
  numberOfModules Int?  
  numberOfLectures Int?  
  reviews  String?
  validity  String?
  status Boolean @default(true)
  categoryId  Int?
  category    Categories?   @relation(fields: [categoryId], references: [id]) 
  coursemedia Coursemedia[]
  orders Orders[]
  createdAt     DateTime  @default(now()) 
}

model Coursemedia {
  id        Int     @default(autoincrement()) @id
  title     String?
  description     String?
  slug      String?
  video   String?
  poster   String?
  time   String?  
  createdAt     DateTime  @default(now()) 
  course    Courses?   @relation(fields: [courseId], references: [id])
  courseId  Int? 
}

model ProductOrders {
  id        Int     @default(autoincrement()) @id
  orderNumber     String?  @unique
  name        String
  email       String
  contact String?
  address   Json?
  totalProducts Int
  amount Decimal
  tax Decimal?
  shippingCharge  Decimal ?
  totalAmount Decimal
  productDetails Json?
  paymentID String?
  paymentStatus String ?
  orderStatus String ?
  createdAt     DateTime  @default(now()) 
  customer    User?   @relation(fields: [cusId], references: [id])
  cusId  Int? 
}


model Orders {
  id        Int @default(autoincrement()) @id
  orderNumber     String?  @unique
  name        String
  email       String  
  orderType   String  
  amount Decimal? 
  paymentID String?
  paymentStatus String?
  createdAt     DateTime  @default(now())  
  courseId  Int?
  course    Courses?   @relation(fields: [courseId], references: [id]) 
}

model Telconsultations {
  id        Int @default(autoincrement()) @id
  name      String
  email   String
  phone   String
  sellerType   String
  companyType   String
  monthlySale   String
  interestedIn   String
  talkTimePackage   String
  scheduledCallDate   String
  comment   String?
  paymentStatus   String?
  createdAt     DateTime  @default(now())  
}



model Testinomials{
  id        Int  @default(autoincrement()) @id
  name      String? @unique
  company   String?
  description String?
  image    String?  
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  address       String?
  contact       Int?
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  products      ProductOrders[]
 
  @@map(name: "users")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])

  
}
